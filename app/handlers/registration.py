from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.reply import main_buttons
from app.db import SessionLocal
from app.db.repository import get_user_by_tg
from app.services.registration import create_user

router = Router()


class Reg(StatesGroup):
    waiting_name = State()


@router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ')
async def ask_name(msg: Message, state: FSMContext):
    async with SessionLocal() as db:
        if await get_user_by_tg(msg.from_user.id, db):
            await msg.answer('–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ', reply_markup=ReplyKeyboardRemove())
            return

    await msg.answer(
        '–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòÄ\n–ù–∞–ø–∏—à–∏ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é* –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–õ–µ–Ω–∞ –ì–æ–ª–æ–≤–∞—á`', parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Reg.waiting_name)


@router.message(Reg.waiting_name, F.text)
async def save_name(msg: Message, state: FSMContext):
    parts = msg.text.split(maxsplit=1)
    if len(parts) != 2:
        await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–≤–∞ —Å–ª–æ–≤–∞: –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è üôÇ')
        return

    first, last = parts
    async with SessionLocal.begin() as db:
        await create_user(msg.from_user, first, last, db)

    await msg.answer(
        f'–°–ø–∞—Å–∏–±–æ, *{first}*! –¢—ã —Å –Ω–∞–º–∏ ‚úÖ\n–ù–∞–∂–º–∏ ¬´–í—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è ‚òïÔ∏è¬ª, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.', parse_mode='Markdown', reply_markup=main_buttons)
    await state.clear()
